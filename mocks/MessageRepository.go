// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/allisson/psqlqueue/domain"
	mock "github.com/stretchr/testify/mock"
)

// MessageRepository is an autogenerated mock type for the MessageRepository type
type MessageRepository struct {
	mock.Mock
}

// Ack provides a mock function with given fields: ctx, id
func (_m *MessageRepository) Ack(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Ack")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: ctx, message
func (_m *MessageRepository) Create(ctx context.Context, message *domain.Message) error {
	ret := _m.Called(ctx, message)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Message) error); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateMany provides a mock function with given fields: ctx, messages
func (_m *MessageRepository) CreateMany(ctx context.Context, messages []*domain.Message) error {
	ret := _m.Called(ctx, messages)

	if len(ret) == 0 {
		panic("no return value specified for CreateMany")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*domain.Message) error); ok {
		r0 = rf(ctx, messages)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, id
func (_m *MessageRepository) Get(ctx context.Context, id string) (*domain.Message, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *domain.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Message, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Message); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, queue, label, limit
func (_m *MessageRepository) List(ctx context.Context, queue *domain.Queue, label *string, limit uint) ([]*domain.Message, error) {
	ret := _m.Called(ctx, queue, label, limit)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*domain.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Queue, *string, uint) ([]*domain.Message, error)); ok {
		return rf(ctx, queue, label, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Queue, *string, uint) []*domain.Message); ok {
		r0 = rf(ctx, queue, label, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.Queue, *string, uint) error); ok {
		r1 = rf(ctx, queue, label, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Nack provides a mock function with given fields: ctx, id, visibilityTimeoutSeconds
func (_m *MessageRepository) Nack(ctx context.Context, id string, visibilityTimeoutSeconds uint) error {
	ret := _m.Called(ctx, id, visibilityTimeoutSeconds)

	if len(ret) == 0 {
		panic("no return value specified for Nack")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uint) error); ok {
		r0 = rf(ctx, id, visibilityTimeoutSeconds)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMessageRepository creates a new instance of MessageRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessageRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessageRepository {
	mock := &MessageRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

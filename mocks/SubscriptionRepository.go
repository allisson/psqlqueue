// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/allisson/psqlqueue/domain"
	mock "github.com/stretchr/testify/mock"
)

// SubscriptionRepository is an autogenerated mock type for the SubscriptionRepository type
type SubscriptionRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, subscription
func (_m *SubscriptionRepository) Create(ctx context.Context, subscription *domain.Subscription) error {
	ret := _m.Called(ctx, subscription)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Subscription) error); ok {
		r0 = rf(ctx, subscription)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *SubscriptionRepository) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, id
func (_m *SubscriptionRepository) Get(ctx context.Context, id string) (*domain.Subscription, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *domain.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Subscription, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Subscription); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, offset, limit
func (_m *SubscriptionRepository) List(ctx context.Context, offset uint, limit uint) ([]*domain.Subscription, error) {
	ret := _m.Called(ctx, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*domain.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint) ([]*domain.Subscription, error)); ok {
		return rf(ctx, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint) []*domain.Subscription); ok {
		r0 = rf(ctx, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint, uint) error); ok {
		r1 = rf(ctx, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListByTopic provides a mock function with given fields: ctx, topicID, offset, limit
func (_m *SubscriptionRepository) ListByTopic(ctx context.Context, topicID string, offset uint, limit uint) ([]*domain.Subscription, error) {
	ret := _m.Called(ctx, topicID, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for ListByTopic")
	}

	var r0 []*domain.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uint, uint) ([]*domain.Subscription, error)); ok {
		return rf(ctx, topicID, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, uint, uint) []*domain.Subscription); ok {
		r0 = rf(ctx, topicID, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, uint, uint) error); ok {
		r1 = rf(ctx, topicID, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSubscriptionRepository creates a new instance of SubscriptionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSubscriptionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *SubscriptionRepository {
	mock := &SubscriptionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
